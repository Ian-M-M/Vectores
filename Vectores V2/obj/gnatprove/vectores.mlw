(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "vector" defined at vectores.ads:4, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "vector" defined at vectores.ads:4, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "vector" defined at vectores.ads:4, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "vector" defined at vectores.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Vectores__vector
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type vector =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type vector__ref =
  { mutable vector__content "model_trace:" "name:" : vector }
 
 function vector__ref___projection 
   (a : vector__ref) : vector =
  a.vector__content
 
 meta "model_projection" function vector__ref___projection
 
 meta "inline : no" function vector__ref___projection
 
 val vector__havoc 
   (x : vector__ref) : unit
  writes {x}

end

(* Module for defining the constant "str" defined at vectores.ads:10, created in Gnat2Why.Decls.Translate_Constant *)
module Vectores__uppercase__str
 use import "_gnatprove_standard".Main
 use        Standard__string

 function str #"vectores.ads" 10 0 0#"model_projected" "model_trace:2700" "name:Str" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "str" defined at vectores.ads:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__uppercase__str___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T16s" defined at vectores.ads:14, created in Gnat2Why.Types.Translate_Type *)
module Vectores__uppercase__L15s__T16s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t16s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t16s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t16s__ref =
  { mutable t16s__content "model_trace:" "name:" : t16s }
 
 function t16s__ref___projection 
   (a : t16s__ref) : t16s =
  a.t16s__content
 
 meta "model_projection" function t16s__ref___projection
 
 meta "inline : no" function t16s__ref___projection
 
 val t16s__havoc 
   (x : t16s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "uppercase" defined at vectores.ads:10, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Vectores__uppercase
 use import "_gnatprove_standard".Main
 use        Standard__string

 function uppercase 
   (str : Standard__string.string) : Standard__string.string
 
 predicate uppercase__function_guard 
   (result : Standard__string.string) (str : Standard__string.string) 

end

(* Module for defining the constant "vec1" defined at vectores.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Vectores__suma__vec1
 use import "_gnatprove_standard".Main
 use        Vectores__vector

 function vec1 #"vectores.ads" 20 0 0#"model_projected" "model_trace:2753" "name:vec1" 
   : Vectores__vector.vector
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vec1" defined at vectores.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__suma__vec1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "vec2" defined at vectores.ads:20, created in Gnat2Why.Decls.Translate_Constant *)
module Vectores__suma__vec2
 use import "_gnatprove_standard".Main
 use        Vectores__vector

 function vec2 #"vectores.ads" 20 0 0#"model_projected" "model_trace:2762" "name:vec2" 
   : Vectores__vector.vector
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vec2" defined at vectores.ads:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__suma__vec2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T18s" defined at vectores.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Vectores__suma__L17s__T18s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t18s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t18s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18s__ref =
  { mutable t18s__content "model_trace:" "name:" : t18s }
 
 function t18s__ref___projection 
   (a : t18s__ref) : t18s =
  a.t18s__content
 
 meta "model_projection" function t18s__ref___projection
 
 meta "inline : no" function t18s__ref___projection
 
 val t18s__havoc 
   (x : t18s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T20s" defined at vectores.ads:35, created in Gnat2Why.Types.Translate_Type *)
module Vectores__suma__L19s__T20s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t20s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t20s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t20s__ref =
  { mutable t20s__content "model_trace:" "name:" : t20s }
 
 function t20s__ref___projection 
   (a : t20s__ref) : t20s =
  a.t20s__content
 
 meta "model_projection" function t20s__ref___projection
 
 meta "inline : no" function t20s__ref___projection
 
 val t20s__havoc 
   (x : t20s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "suma" defined at vectores.ads:20, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Vectores__suma
 use import "_gnatprove_standard".Main
 use        Vectores__vector

 function suma 
   (vec1 : Vectores__vector.vector) (vec2 : Vectores__vector.vector) : Vectores__vector.vector
 
 predicate suma__function_guard 
   (result : Vectores__vector.vector) (vec1 : Vectores__vector.vector) (vec2 : Vectores__vector.vector) 

end

(* Module for defining the constant "vec1" defined at vectores.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Vectores__resta__vec1
 use import "_gnatprove_standard".Main
 use        Vectores__vector

 function vec1 #"vectores.ads" 40 0 0#"model_projected" "name:vec1" "model_trace:2891" 
   : Vectores__vector.vector
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vec1" defined at vectores.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__resta__vec1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "vec2" defined at vectores.ads:40, created in Gnat2Why.Decls.Translate_Constant *)
module Vectores__resta__vec2
 use import "_gnatprove_standard".Main
 use        Vectores__vector

 function vec2 #"vectores.ads" 40 0 0#"model_projected" "name:vec2" "model_trace:2900" 
   : Vectores__vector.vector
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "vec2" defined at vectores.ads:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__resta__vec2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T22s" defined at vectores.ads:46, created in Gnat2Why.Types.Translate_Type *)
module Vectores__resta__L21s__T22s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t22s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t22s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t22s__ref =
  { mutable t22s__content "model_trace:" "name:" : t22s }
 
 function t22s__ref___projection 
   (a : t22s__ref) : t22s =
  a.t22s__content
 
 meta "model_projection" function t22s__ref___projection
 
 meta "inline : no" function t22s__ref___projection
 
 val t22s__havoc 
   (x : t22s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T24s" defined at vectores.ads:55, created in Gnat2Why.Types.Translate_Type *)
module Vectores__resta__L23s__T24s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t24s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t24s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t24s__ref =
  { mutable t24s__content "model_trace:" "name:" : t24s }
 
 function t24s__ref___projection 
   (a : t24s__ref) : t24s =
  a.t24s__content
 
 meta "model_projection" function t24s__ref___projection
 
 meta "inline : no" function t24s__ref___projection
 
 val t24s__havoc 
   (x : t24s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "resta" defined at vectores.ads:40, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Vectores__resta
 use import "_gnatprove_standard".Main
 use        Vectores__vector

 function resta 
   (vec1 : Vectores__vector.vector) (vec2 : Vectores__vector.vector) : Vectores__vector.vector
 
 predicate resta__function_guard 
   (result : Vectores__vector.vector) (vec1 : Vectores__vector.vector) (vec2 : Vectores__vector.vector) 

end

(* Module for axiomatizing type "TS1bP1" defined at vectores.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Vectores__uppercase__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content "model_trace:" "name:" : tS1bP1 }
 
 function tS1bP1__ref___projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at vectores.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Vectores__uppercase__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Vectores__uppercase__TS1bP1

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Vectores__uppercase__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref =
  { mutable s1b__content "model_trace:" "name:" : s1b }
 
 function s1b__ref___projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at vectores.adb:7, created in Gnat2Why.Types.Translate_Type *)
module Vectores__uppercase__L_1__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content "model_trace:" "name:" : t2b }
 
 function t2b__ref___projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at vectores.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Vectores__uppercase__L_1__L5b__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t6b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref =
  { mutable t6b__content "model_trace:" "name:" : t6b }
 
 function t6b__ref___projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref___projection
 
 meta "inline : no" function t6b__ref___projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4b" defined at vectores.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Vectores__uppercase__L_1__L3b__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t4b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content "model_trace:" "name:" : t4b }
 
 function t4b__ref___projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref___projection
 
 meta "inline : no" function t4b__ref___projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS9bP1" defined at vectores.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Vectores__suma__TS9bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS9bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS9bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS9bP1__ref =
  { mutable tS9bP1__content "model_trace:" "name:" : tS9bP1 }
 
 function tS9bP1__ref___projection 
   (a : tS9bP1__ref) : tS9bP1 =
  a.tS9bP1__content
 
 meta "model_projection" function tS9bP1__ref___projection
 
 meta "inline : no" function tS9bP1__ref___projection
 
 val tS9bP1__havoc 
   (x : tS9bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S9b" defined at vectores.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Vectores__suma__S9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Vectores__suma__TS9bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Vectores__suma__TS9bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s9b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s9b__ref =
  { mutable s9b__content "model_trace:" "name:" : s9b }
 
 function s9b__ref___projection 
   (a : s9b__ref) : s9b =
  a.s9b__content
 
 meta "model_projection" function s9b__ref___projection
 
 meta "inline : no" function s9b__ref___projection
 
 val s9b__havoc 
   (x : s9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS8bP1" defined at vectores.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Vectores__suma__TS8bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS8bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS8bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS8bP1__ref =
  { mutable tS8bP1__content "model_trace:" "name:" : tS8bP1 }
 
 function tS8bP1__ref___projection 
   (a : tS8bP1__ref) : tS8bP1 =
  a.tS8bP1__content
 
 meta "model_projection" function tS8bP1__ref___projection
 
 meta "inline : no" function tS8bP1__ref___projection
 
 val tS8bP1__havoc 
   (x : tS8bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S8b" defined at vectores.adb:19, created in Gnat2Why.Types.Translate_Type *)
module Vectores__suma__S8b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Vectores__suma__TS8bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Vectores__suma__TS8bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s8b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s8b__ref =
  { mutable s8b__content "model_trace:" "name:" : s8b }
 
 function s8b__ref___projection 
   (a : s8b__ref) : s8b =
  a.s8b__content
 
 meta "model_projection" function s8b__ref___projection
 
 meta "inline : no" function s8b__ref___projection
 
 val s8b__havoc 
   (x : s8b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T10b" defined at vectores.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Vectores__suma__L_2__T10b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t10b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10b__ref =
  { mutable t10b__content "model_trace:" "name:" : t10b }
 
 function t10b__ref___projection 
   (a : t10b__ref) : t10b =
  a.t10b__content
 
 meta "model_projection" function t10b__ref___projection
 
 meta "inline : no" function t10b__ref___projection
 
 val t10b__havoc 
   (x : t10b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14b" defined at vectores.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Vectores__suma__L_2__L13b__T14b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref =
  { mutable t14b__content "model_trace:" "name:" : t14b }
 
 function t14b__ref___projection 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref___projection
 
 meta "inline : no" function t14b__ref___projection
 
 val t14b__havoc 
   (x : t14b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T12b" defined at vectores.adb:24, created in Gnat2Why.Types.Translate_Type *)
module Vectores__suma__L_2__L11b__T12b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t12b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t12b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t12b__ref =
  { mutable t12b__content "model_trace:" "name:" : t12b }
 
 function t12b__ref___projection 
   (a : t12b__ref) : t12b =
  a.t12b__content
 
 meta "model_projection" function t12b__ref___projection
 
 meta "inline : no" function t12b__ref___projection
 
 val t12b__havoc 
   (x : t12b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS17bP1" defined at vectores.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Vectores__resta__TS17bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS17bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS17bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS17bP1__ref =
  { mutable tS17bP1__content "model_trace:" "name:" : tS17bP1 }
 
 function tS17bP1__ref___projection 
   (a : tS17bP1__ref) : tS17bP1 =
  a.tS17bP1__content
 
 meta "model_projection" function tS17bP1__ref___projection
 
 meta "inline : no" function tS17bP1__ref___projection
 
 val tS17bP1__havoc 
   (x : tS17bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S17b" defined at vectores.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Vectores__resta__S17b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Vectores__resta__TS17bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Vectores__resta__TS17bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s17b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s17b__ref =
  { mutable s17b__content "model_trace:" "name:" : s17b }
 
 function s17b__ref___projection 
   (a : s17b__ref) : s17b =
  a.s17b__content
 
 meta "model_projection" function s17b__ref___projection
 
 meta "inline : no" function s17b__ref___projection
 
 val s17b__havoc 
   (x : s17b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS16bP1" defined at vectores.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Vectores__resta__TS16bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS16bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS16bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS16bP1__ref =
  { mutable tS16bP1__content "model_trace:" "name:" : tS16bP1 }
 
 function tS16bP1__ref___projection 
   (a : tS16bP1__ref) : tS16bP1 =
  a.tS16bP1__content
 
 meta "model_projection" function tS16bP1__ref___projection
 
 meta "inline : no" function tS16bP1__ref___projection
 
 val tS16bP1__havoc 
   (x : tS16bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S16b" defined at vectores.adb:31, created in Gnat2Why.Types.Translate_Type *)
module Vectores__resta__S16b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Vectores__resta__TS16bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Vectores__resta__TS16bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s16b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s16b__ref =
  { mutable s16b__content "model_trace:" "name:" : s16b }
 
 function s16b__ref___projection 
   (a : s16b__ref) : s16b =
  a.s16b__content
 
 meta "model_projection" function s16b__ref___projection
 
 meta "inline : no" function s16b__ref___projection
 
 val s16b__havoc 
   (x : s16b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T18b" defined at vectores.adb:34, created in Gnat2Why.Types.Translate_Type *)
module Vectores__resta__L_3__T18b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t18b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t18b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t18b__ref =
  { mutable t18b__content "model_trace:" "name:" : t18b }
 
 function t18b__ref___projection 
   (a : t18b__ref) : t18b =
  a.t18b__content
 
 meta "model_projection" function t18b__ref___projection
 
 meta "inline : no" function t18b__ref___projection
 
 val t18b__havoc 
   (x : t18b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T22b" defined at vectores.adb:36, created in Gnat2Why.Types.Translate_Type *)
module Vectores__resta__L_3__L21b__T22b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t22b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t22b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t22b__ref =
  { mutable t22b__content "model_trace:" "name:" : t22b }
 
 function t22b__ref___projection 
   (a : t22b__ref) : t22b =
  a.t22b__content
 
 meta "model_projection" function t22b__ref___projection
 
 meta "inline : no" function t22b__ref___projection
 
 val t22b__havoc 
   (x : t22b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T20b" defined at vectores.adb:36, created in Gnat2Why.Types.Translate_Type *)
module Vectores__resta__L_3__L19b__T20b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t20b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t20b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t20b__ref =
  { mutable t20b__content "model_trace:" "name:" : t20b }
 
 function t20b__ref___projection 
   (a : t20b__ref) : t20b =
  a.t20b__content
 
 meta "model_projection" function t20b__ref___projection
 
 meta "inline : no" function t20b__ref___projection
 
 val t20b__havoc 
   (x : t20b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "ascii" defined at vectores.adb:4, created in Gnat2Why.Decls.Translate_Variable *)
module Vectores__uppercase__ascii
 use import "_gnatprove_standard".Main

 val ascii #"vectores.adb" 4 0 0#"model_projected" "model_trace:2327" "name:ascii"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ascii" defined at vectores.adb:4, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__uppercase__ascii___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "res" defined at vectores.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Vectores__uppercase__res
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__character

 val res #"vectores.adb" 5 0 0#"model_projected" "model_trace:2336" "name:res"  : Array__Int__Standard__character.map__ref 
 
 function res__first #"vectores.adb" 5 0 0#"model_projected" "name:res" "model_trace:2336'First" 
   : Standard__integer.integer
 
 function res__last #"vectores.adb" 5 0 0#"model_projected" "name:res" "model_trace:2336'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "res" defined at vectores.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__uppercase__res___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at vectores.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module Vectores__uppercase__L_1__i
 use import "_gnatprove_standard".Main

 val i #"vectores.adb" 7 0 0#"model_projected" "model_trace:2350" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at vectores.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__uppercase__L_1__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "res" defined at vectores.adb:20, created in Gnat2Why.Decls.Translate_Variable *)
module Vectores__suma__res
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val res #"vectores.adb" 20 0 0#"model_projected" "name:res" "model_trace:2452"  : Array__Int__Standard__integer.map__ref 
 
 function res__first #"vectores.adb" 20 0 0#"model_projected" "name:res" "model_trace:2452'First" 
   : Standard__integer.integer
 
 function res__last #"vectores.adb" 20 0 0#"model_projected" "name:res" "model_trace:2452'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "res" defined at vectores.adb:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__suma__res___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at vectores.adb:22, created in Gnat2Why.Decls.Translate_Variable *)
module Vectores__suma__L_2__i
 use import "_gnatprove_standard".Main

 val i #"vectores.adb" 22 0 0#"model_projected" "name:I" "model_trace:2466"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at vectores.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__suma__L_2__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "res" defined at vectores.adb:32, created in Gnat2Why.Decls.Translate_Variable *)
module Vectores__resta__res
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val res #"vectores.adb" 32 0 0#"model_projected" "name:res" "model_trace:2553"  : Array__Int__Standard__integer.map__ref 
 
 function res__first #"vectores.adb" 32 0 0#"model_projected" "name:res" "model_trace:2553'First" 
   : Standard__integer.integer
 
 function res__last #"vectores.adb" 32 0 0#"model_projected" "name:res" "model_trace:2553'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "res" defined at vectores.adb:32, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__resta__res___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at vectores.adb:34, created in Gnat2Why.Decls.Translate_Variable *)
module Vectores__resta__L_3__i
 use import "_gnatprove_standard".Main

 val i #"vectores.adb" 34 0 0#"model_projected" "name:I" "model_trace:2567"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at vectores.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__resta__L_3__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining the loop exit exception for the loop "L_1" defined at vectores.adb:7, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Vectores__uppercase__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at vectores.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__uppercase__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at vectores.adb:22, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Vectores__suma__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at vectores.adb:22, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__suma__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_3" defined at vectores.adb:34, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Vectores__resta__L_3
 use import "_gnatprove_standard".Main

 exception L_3

end

(* Module giving an empty axiom for the entity "L_3" defined at vectores.adb:34, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Vectores__resta__L_3___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "vector" defined at vectores.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__vector___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Vectores__vector

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : Vectores__vector.vector) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (temp___skip_constant_156) then (
   true) else (
   (Vectores__vector.dynamic_property Standard__positive.first Standard__positive.last (Vectores__vector.first temp___expr_159) (Vectores__vector.last temp___expr_159))))

end

(* Module giving axioms for type "T16s" defined at vectores.ads:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__uppercase__L15s__T16s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T18s" defined at vectores.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__suma__L17s__T18s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20s" defined at vectores.ads:35, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__suma__L19s__T20s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T22s" defined at vectores.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__resta__L21s__T22s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T24s" defined at vectores.ads:55, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__resta__L23s__T24s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS1bP1" defined at vectores.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__uppercase__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at vectores.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__uppercase__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Vectores__uppercase__str
 use        Vectores__uppercase__S1b

 predicate dynamic_invariant "inline" 
   (temp___expr_181 : Vectores__uppercase__S1b.s1b) (temp___is_init_177 : bool) (temp___skip_constant_178 : bool) (temp___do_toplevel_179 : bool) (temp___do_typ_inv_180 : bool)  =
  (if (temp___skip_constant_178) then (
   true) else (
   ( (Vectores__uppercase__S1b.dynamic_property (Standard__string.first Vectores__uppercase__str.str) (Standard__string.last Vectores__uppercase__str.str) (Vectores__uppercase__S1b.first temp___expr_181) (Vectores__uppercase__S1b.last temp___expr_181)) /\ ( ((Vectores__uppercase__S1b.first temp___expr_181) = (Standard__string.first Vectores__uppercase__str.str)) /\ ((Vectores__uppercase__S1b.last temp___expr_181) = (Standard__string.last Vectores__uppercase__str.str)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_183 : Vectores__uppercase__S1b.s1b) (temp___skip_top_level_184 : bool)  =
  true

end

(* Module giving axioms for type "T2b" defined at vectores.adb:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__uppercase__L_1__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6b" defined at vectores.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__uppercase__L_1__L5b__T6b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at vectores.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__uppercase__L_1__L3b__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS9bP1" defined at vectores.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__suma__TS9bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S9b" defined at vectores.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__suma__S9b___axiom
 use import "_gnatprove_standard".Main
 use        Vectores__vector
 use        Vectores__suma__vec2
 use        Vectores__suma__S9b

 predicate dynamic_invariant "inline" 
   (temp___expr_191 : Vectores__suma__S9b.s9b) (temp___is_init_187 : bool) (temp___skip_constant_188 : bool) (temp___do_toplevel_189 : bool) (temp___do_typ_inv_190 : bool)  =
  (if (temp___skip_constant_188) then (
   true) else (
   ( (Vectores__suma__S9b.dynamic_property (Vectores__vector.first Vectores__suma__vec2.vec2) (Vectores__vector.last Vectores__suma__vec2.vec2) (Vectores__suma__S9b.first temp___expr_191) (Vectores__suma__S9b.last temp___expr_191)) /\ ( ((Vectores__suma__S9b.first temp___expr_191) = (Vectores__vector.first Vectores__suma__vec2.vec2)) /\ ((Vectores__suma__S9b.last temp___expr_191) = (Vectores__vector.last Vectores__suma__vec2.vec2)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_193 : Vectores__suma__S9b.s9b) (temp___skip_top_level_194 : bool)  =
  true

end

(* Module giving axioms for type "TS8bP1" defined at vectores.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__suma__TS8bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S8b" defined at vectores.adb:19, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__suma__S8b___axiom
 use import "_gnatprove_standard".Main
 use        Vectores__vector
 use        Vectores__suma__vec1
 use        Vectores__suma__S8b

 predicate dynamic_invariant "inline" 
   (temp___expr_201 : Vectores__suma__S8b.s8b) (temp___is_init_197 : bool) (temp___skip_constant_198 : bool) (temp___do_toplevel_199 : bool) (temp___do_typ_inv_200 : bool)  =
  (if (temp___skip_constant_198) then (
   true) else (
   ( (Vectores__suma__S8b.dynamic_property (Vectores__vector.first Vectores__suma__vec1.vec1) (Vectores__vector.last Vectores__suma__vec1.vec1) (Vectores__suma__S8b.first temp___expr_201) (Vectores__suma__S8b.last temp___expr_201)) /\ ( ((Vectores__suma__S8b.first temp___expr_201) = (Vectores__vector.first Vectores__suma__vec1.vec1)) /\ ((Vectores__suma__S8b.last temp___expr_201) = (Vectores__vector.last Vectores__suma__vec1.vec1)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_203 : Vectores__suma__S8b.s8b) (temp___skip_top_level_204 : bool)  =
  true

end

(* Module giving axioms for type "T10b" defined at vectores.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__suma__L_2__T10b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14b" defined at vectores.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__suma__L_2__L13b__T14b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T12b" defined at vectores.adb:24, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__suma__L_2__L11b__T12b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS17bP1" defined at vectores.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__resta__TS17bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S17b" defined at vectores.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__resta__S17b___axiom
 use import "_gnatprove_standard".Main
 use        Vectores__vector
 use        Vectores__resta__vec2
 use        Vectores__resta__S17b

 predicate dynamic_invariant "inline" 
   (temp___expr_211 : Vectores__resta__S17b.s17b) (temp___is_init_207 : bool) (temp___skip_constant_208 : bool) (temp___do_toplevel_209 : bool) (temp___do_typ_inv_210 : bool)  =
  (if (temp___skip_constant_208) then (
   true) else (
   ( (Vectores__resta__S17b.dynamic_property (Vectores__vector.first Vectores__resta__vec2.vec2) (Vectores__vector.last Vectores__resta__vec2.vec2) (Vectores__resta__S17b.first temp___expr_211) (Vectores__resta__S17b.last temp___expr_211)) /\ ( ((Vectores__resta__S17b.first temp___expr_211) = (Vectores__vector.first Vectores__resta__vec2.vec2)) /\ ((Vectores__resta__S17b.last temp___expr_211) = (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_213 : Vectores__resta__S17b.s17b) (temp___skip_top_level_214 : bool)  =
  true

end

(* Module giving axioms for type "TS16bP1" defined at vectores.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__resta__TS16bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S16b" defined at vectores.adb:31, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__resta__S16b___axiom
 use import "_gnatprove_standard".Main
 use        Vectores__vector
 use        Vectores__resta__vec1
 use        Vectores__resta__S16b

 predicate dynamic_invariant "inline" 
   (temp___expr_221 : Vectores__resta__S16b.s16b) (temp___is_init_217 : bool) (temp___skip_constant_218 : bool) (temp___do_toplevel_219 : bool) (temp___do_typ_inv_220 : bool)  =
  (if (temp___skip_constant_218) then (
   true) else (
   ( (Vectores__resta__S16b.dynamic_property (Vectores__vector.first Vectores__resta__vec1.vec1) (Vectores__vector.last Vectores__resta__vec1.vec1) (Vectores__resta__S16b.first temp___expr_221) (Vectores__resta__S16b.last temp___expr_221)) /\ ( ((Vectores__resta__S16b.first temp___expr_221) = (Vectores__vector.first Vectores__resta__vec1.vec1)) /\ ((Vectores__resta__S16b.last temp___expr_221) = (Vectores__vector.last Vectores__resta__vec1.vec1)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_223 : Vectores__resta__S16b.s16b) (temp___skip_top_level_224 : bool)  =
  true

end

(* Module giving axioms for type "T18b" defined at vectores.adb:34, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__resta__L_3__T18b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T22b" defined at vectores.adb:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__resta__L_3__L21b__T22b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T20b" defined at vectores.adb:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Vectores__resta__L_3__L19b__T20b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for declaring a program function (and possibly an axiom) for "uppercase" defined at vectores.ads:10, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Vectores__uppercase___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__string___axiom
 use        Vectores__uppercase
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character

 val uppercase 
   (str : Standard__string.string) : Standard__string.string
  requires {  ((Standard__string.length str) > 0) }
  ensures {  ( ( (result = (Vectores__uppercase.uppercase str)) /\ (Vectores__uppercase.uppercase__function_guard result str) ) /\ ( (Standard__string___axiom.dynamic_invariant result True False True True) /\ (forall i   "model" "name:I" "model_trace:2724"  : int.
   ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ((Boolean.notb (Boolean.andb (97 <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) i))) ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) i)) <= 122))) = True) )) ) ) }
 
 axiom uppercase__post_axiom :
  (forall str   : Standard__string.string [(Vectores__uppercase.uppercase str)].
   ( ( (Standard__string___axiom.dynamic_invariant str True True True True) /\ ((Standard__string.length str) > 0) ) -> (let result = (Vectores__uppercase.uppercase str) in (
    (if ((Vectores__uppercase.uppercase__function_guard result str)) then (
     ( ( (forall i   "model" "name:I" "model_trace:2724"  : int.
      ( ( ((Standard__string.first str) <= i) /\ (i <= (Standard__string.last str)) ) -> ((Boolean.notb (Boolean.andb (97 <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) i))) ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array result) i)) <= 122))) = True) )) /\ (Standard__string___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "suma" defined at vectores.ads:20, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Vectores__suma___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Vectores__vector
 use        Vectores__suma
 use        Array__Int__Standard__integer
 use        Vectores__vector___axiom
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val suma 
   (vec1 : Vectores__vector.vector) (vec2 : Vectores__vector.vector) : Vectores__vector.vector
  requires {  ( ((Vectores__vector.first vec1) = (Vectores__vector.first vec2)) /\ ( ((Vectores__vector.last vec1) = (Vectores__vector.last vec2)) /\ ( ((Vectores__vector.length vec1) > 0) /\ (forall i   "model" "name:I" "model_trace:2801"  : int.
   ( ( ((Vectores__vector.first vec1) <= i) /\ (i <= (Vectores__vector.last vec1)) ) -> (if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) > 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) > 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) <= (2147483647 - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i))))) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) < 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) < 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) >= (( -2147483648 ) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i))))) else (
    true)))) )) ) ) ) }
  ensures {  ( ( (result = (Vectores__suma.suma vec1 vec2)) /\ (Vectores__suma.suma__function_guard result vec1 vec2) ) /\ ( (Vectores__vector___axiom.dynamic_invariant result True False True True) /\ (forall i   "model" "name:I" "model_trace:2861"  : int.
   ( ( ((Vectores__vector.first vec1) <= i) /\ (i <= (Vectores__vector.last vec1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array result) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)))) )) ) ) }
 
 axiom suma__post_axiom :
  (forall vec1   vec2   : Vectores__vector.vector [(Vectores__suma.suma vec1 vec2)].
   ( ( ( (Vectores__vector___axiom.dynamic_invariant vec1 True True True True) /\ (Vectores__vector___axiom.dynamic_invariant vec2 True True True True) ) /\ ( ((Vectores__vector.first vec1) = (Vectores__vector.first vec2)) /\ ( ((Vectores__vector.last vec1) = (Vectores__vector.last vec2)) /\ ( ((Vectores__vector.length vec1) > 0) /\ (forall i   "model" "name:I" "model_trace:2801"  : int.
    ( ( ((Vectores__vector.first vec1) <= i) /\ (i <= (Vectores__vector.last vec1)) ) -> (if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) > 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) > 0) )) then (
     ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) <= (2147483647 - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i))))) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) < 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) < 0) )) then (
     ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) >= (( -2147483648 ) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i))))) else (
     true)))) )) ) ) ) ) -> (let result = (Vectores__suma.suma vec1 vec2) in (
    (if ((Vectores__suma.suma__function_guard result vec1 vec2)) then (
     ( ( (forall i   "model" "name:I" "model_trace:2861"  : int.
      ( ( ((Vectores__vector.first vec1) <= i) /\ (i <= (Vectores__vector.last vec1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array result) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)))) )) /\ (Vectores__vector___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "resta" defined at vectores.ads:40, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Vectores__resta___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Vectores__vector
 use        Vectores__resta
 use        Array__Int__Standard__integer
 use        Vectores__vector___axiom
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val resta 
   (vec1 : Vectores__vector.vector) (vec2 : Vectores__vector.vector) : Vectores__vector.vector
  requires {  ( ((Vectores__vector.first vec1) = (Vectores__vector.first vec2)) /\ ( ((Vectores__vector.last vec1) = (Vectores__vector.last vec2)) /\ ( ((Vectores__vector.length vec1) > 0) /\ (forall i   "model" "name:I" "model_trace:2939"  : int.
   ( ( ((Vectores__vector.first vec1) <= i) /\ (i <= (Vectores__vector.last vec1)) ) -> (if (((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) = ( -2147483648 ))) then (
    false) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) > 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) < 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) <= (2147483647 + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i))))) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) < 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) > 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) >= (( -2147483648 ) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i))))) else (
    true)))))) )) ) ) ) }
  ensures {  ( ( (result = (Vectores__resta.resta vec1 vec2)) /\ (Vectores__resta.resta__function_guard result vec1 vec2) ) /\ ( (Vectores__vector___axiom.dynamic_invariant result True False True True) /\ (forall i   "model" "name:I" "model_trace:3008"  : int.
   ( ( ((Vectores__vector.first vec1) <= i) /\ (i <= (Vectores__vector.last vec1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array result) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)))) )) ) ) }
 
 axiom resta__post_axiom :
  (forall vec1   vec2   : Vectores__vector.vector [(Vectores__resta.resta vec1 vec2)].
   ( ( ( (Vectores__vector___axiom.dynamic_invariant vec1 True True True True) /\ (Vectores__vector___axiom.dynamic_invariant vec2 True True True True) ) /\ ( ((Vectores__vector.first vec1) = (Vectores__vector.first vec2)) /\ ( ((Vectores__vector.last vec1) = (Vectores__vector.last vec2)) /\ ( ((Vectores__vector.length vec1) > 0) /\ (forall i   "model" "name:I" "model_trace:2939"  : int.
    ( ( ((Vectores__vector.first vec1) <= i) /\ (i <= (Vectores__vector.last vec1)) ) -> (if (((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) = ( -2147483648 ))) then (
     false) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) > 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) < 0) )) then (
     ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) <= (2147483647 + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i))))) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) < 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)) > 0) )) then (
     ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) >= (( -2147483648 ) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i))))) else (
     true)))))) )) ) ) ) ) -> (let result = (Vectores__resta.resta vec1 vec2) in (
    (if ((Vectores__resta.resta__function_guard result vec1 vec2)) then (
     ( ( (forall i   "model" "name:I" "model_trace:3008"  : int.
      ( ( ((Vectores__vector.first vec1) <= i) /\ (i <= (Vectores__vector.last vec1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array result) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec1) i)) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vec2) i)))) )) /\ (Vectores__vector___axiom.dynamic_invariant result True False True True) ) /\ true )) else true)))
    ))

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "vectores" defined at vectores.ads:2, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Vectores__package_def
 use import "_gnatprove_standard".Main

 let def #"vectores.ads" 2 0 0#"GP_Subp:vectores.ads:2" "W:diverges:N" 
   (__void_param : unit)
  requires { #"vectores.ads" 2 0 0# true }
  ensures { #"vectores.ads" 2 0 0# true }
   =
  ( (#"vectores.ads" 2 0 0# ());
  (#"vectores.ads" 3 0 0# ());
  (#"vectores.ads" 4 0 0# ());
  (#"vectores.ads" 10 0 0# ());
  (#"vectores.ads" 14 0 0# ());
  (#"vectores.ads" 12 0 0# ());
  (#"vectores.ads" 20 0 0# ());
  (#"vectores.ads" 35 0 0# ());
  (#"vectores.ads" 24 0 0# ());
  (#"vectores.ads" 25 0 0# ());
  (#"vectores.ads" 26 0 0# ());
  (#"vectores.ads" 24 0 0# ());
  (#"vectores.ads" 40 0 0# ());
  (#"vectores.ads" 55 0 0# ());
  (#"vectores.ads" 43 0 0# ());
  (#"vectores.ads" 44 0 0# ());
  (#"vectores.ads" 45 0 0# ());
  (#"vectores.ads" 43 0 0# ());
  (#"vectores.ads" 43 0 0# ());
  (#"vectores.ads" 43 0 0# ());
  (#"vectores.ads" 43 0 0# ());
  (#"vectores.adb" 1 0 0# ());
  (#"vectores.adb" 3 0 0# ());
  (#"vectores.adb" 19 0 0# ());
  (#"vectores.adb" 31 0 0# ());
  ( "GP_Sloc:vectores.adb:43:1" (#"vectores.adb" 43 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "uppercase" defined at vectores.ads:10, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Vectores__uppercase__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__string
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive
 use        Standard__character
 use        Standard__character__rep
 use        Array__Int__Standard__character
 use        Standard__integer__rep
 use        Standard__string___axiom
 use        Vectores__uppercase__str
 use        Vectores__uppercase__ascii
 use        Array__Int__Standard__character
 use        Vectores__uppercase__res
 use        Vectores__uppercase__L_1
 use        Vectores__uppercase__L_1__T2b
 use        Vectores__uppercase__L_1__i
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__character___axiom
 use        Standard__string___axiom
 use        Standard__integer___axiom
 use        Vectores__uppercase__ascii___axiom
 use        Vectores__uppercase__res___axiom
 use        Vectores__uppercase__L_1__i___axiom
 use        Vectores__uppercase__L_1___axiom
 use        Vectores__uppercase__str___axiom
 use        Vectores__uppercase__L_1__T2b___axiom

 val vectores__uppercase__result "model_projected" "model_trace:2693@result" "name:uppercase"  : Standard__string.string__ref 
 
 let def #"vectores.ads" 10 0 0#"W:diverges:N" "GP_Subp:vectores.ads:10" 
   (__void_param : unit)
  requires { #"vectores.ads" 10 0 0# true }
  ensures { #"vectores.ads" 10 0 0# (#"vectores.ads" 14 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:vectores.ads:14:15" "GP_Reason:VC_POSTCONDITION" "GP_Id:6" "comment:       Post =>(for all I in Str'Range =>
              ^ vectores.ads:14:15:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall i #"vectores.ads" 14 0 0#  "model" "name:I" "model_trace:2724"  : int.
   ( ( ((Standard__string.first Vectores__uppercase__str.str) <= i) /\ (i <= (Standard__string.last Vectores__uppercase__str.str)) ) -> ( "GP_Pretty_Ada:2743" "GP_Sloc:vectores.ads:15:15" ((Boolean.notb (Boolean.andb (97 <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array vectores__uppercase__result.Standard__string.string__content) i))) ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array vectores__uppercase__result.Standard__string.string__content) i)) <= 122))) = True) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram vectores.ads:10 *)
  ;
   assume {  (Standard__string___axiom.dynamic_invariant Vectores__uppercase__str.str True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram vectores.ads:10 *)
  ;
  () (* Check for RTE in the Pre of the subprogram vectores.ads:10 *)
  ;
   abstract ensures {true}(let _ = ((  abstract ensures {true}(let _ = Vectores__uppercase__str.str in (
   ()))
   end ;
  (Standard__string.length(Vectores__uppercase__str.str)) ) > 0) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram vectores.ads:10 *)
  ;
   assume {  ((Standard__string.length Vectores__uppercase__str.str) > 0) };
   try
   ( (#"vectores.adb" 3 0 0# ());
   (#"vectores.adb" 4 0 0# ( #"vectores.adb" 4 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"vectores.adb" 4 0 0# assume { #"vectores.adb" 4 0 0# (Standard__integer___axiom.default_initial_assumption Vectores__uppercase__ascii.ascii.int__content False) };
   #"vectores.adb" 4 0 0# assume { #"vectores.adb" 4 0 0# (Standard__integer___axiom.dynamic_invariant Vectores__uppercase__ascii.ascii.int__content False False True True) } ));
   (#"vectores.adb" 5 0 0# ( (let vectores__uppercase__res__assume = Vectores__uppercase__str.str in (
    ( #"vectores.adb" 5 0 0# Vectores__uppercase__res.res.Array__Int__Standard__character.map__content <- ( (Standard__string.to_array(vectores__uppercase__res__assume)) );
    #"vectores.adb" 5 0 0# assume { #"vectores.adb" 5 0 0# ((Standard__integer__rep.to_rep(Vectores__uppercase__res.res__first)) = (Standard__string.first(vectores__uppercase__res__assume))) };
    #"vectores.adb" 5 0 0# assume { #"vectores.adb" 5 0 0# ((Standard__integer__rep.to_rep(Vectores__uppercase__res.res__last)) = (Standard__string.last(vectores__uppercase__res__assume))) } )))
   ;
   #"vectores.adb" 5 0 0# assume { #"vectores.adb" 5 0 0# (if (False) then (
    true) else (
    (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Vectores__uppercase__res.res__first) (Standard__integer__rep.to_rep Vectores__uppercase__res.res__last)))) } ));
   (#"vectores.adb" 7 0 0# ());
   ( "GP_Sloc:vectores.adb:7:26" (#"vectores.adb" 7 0 0# (let temp___228 = ( #"vectores.adb" 7 0 0# abstract ensures {true}(let _ = Vectores__uppercase__str.str in (
    ()))
    end ;
   (Standard__string.first(Vectores__uppercase__str.str)) ) in (
   (let temp___229 = ( #"vectores.adb" 7 0 0# abstract ensures {true}(let _ = Vectores__uppercase__str.str in (
    ()))
    end ;
   (Standard__string.last(Vectores__uppercase__str.str)) ) in (
    ( #"vectores.adb" 7 0 0# Vectores__uppercase__L_1__i.i.int__content <- ( temp___228 );
    () (* Translation of an Ada loop from vectores.adb:7 *)
    ;
    (if ((Boolean.andb((temp___228 <= Vectores__uppercase__L_1__i.i.int__content)) ((Vectores__uppercase__L_1__i.i.int__content <= temp___229)))) then (
     #"vectores.adb" 7 0 0# try
      ( #"vectores.adb" 7 0 0# abstract ensures {true}(let _ = Vectores__uppercase__ascii.ascii.int__content in (
       ()))
       end ;
      (let temp___234 = #"vectores.adb" 7 0 0# (any int
      ensures {#"vectores.adb" 7 0 0# (result = Vectores__uppercase__ascii.ascii.int__content)} 
      ) in (
       ( #"vectores.adb" 7 0 0# abstract ensures {true}(let _ = Vectores__uppercase__L_1__i.i.int__content in (
        ()))
        end ;
       (let temp___233 = #"vectores.adb" 7 0 0# (any int
       ensures {#"vectores.adb" 7 0 0# (result = Vectores__uppercase__L_1__i.i.int__content)} 
       ) in (
        ( #"vectores.adb" 7 0 0# abstract ensures {true}(let _ = Vectores__uppercase__res.res.Array__Int__Standard__character.map__content in (
         ()))
         end ;
        (let temp___231 = #"vectores.adb" 7 0 0# (any Array__Int__Standard__character.map
        ensures {#"vectores.adb" 7 0 0# (result = Vectores__uppercase__res.res.Array__Int__Standard__character.map__content)} 
        ) in (
         ( () (* First unroling of the loop statements appearing before the loop invariant of loop vectores.adb:7 *)
         ;
         ( "GP_Sloc:vectores.adb:8:10" (#"vectores.adb" 8 0 0# ()) );
         ( "GP_Sloc:vectores.adb:8:16" (#"vectores.adb" 8 0 0# #"vectores.adb" 8 0 0# Vectores__uppercase__ascii.ascii.int__content <- ( (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Vectores__uppercase__str.str))) (Vectores__uppercase__L_1__i.i.int__content)))) )) );
         ( "GP_Sloc:vectores.adb:9:13" (#"vectores.adb" 9 0 0# ()) );
         ( "GP_Sloc:vectores.adb:9:29" (#"vectores.adb" 9 0 0# ()) );
         ( "GP_Sloc:vectores.adb:9:10" (#"vectores.adb" 9 0 0# (if ((Boolean.andb((Vectores__uppercase__ascii.ascii.int__content >= 97)) ((Vectores__uppercase__ascii.ascii.int__content <= 122)))) then (
          ( ( "GP_Sloc:vectores.adb:10:13" (#"vectores.adb" 10 0 0# ()) );
          ( "GP_Sloc:vectores.adb:10:37" (#"vectores.adb" 10 0 0# ()) );
          ( "GP_Sloc:vectores.adb:10:20" (#"vectores.adb" 10 0 0# #"vectores.adb" 10 0 0# Vectores__uppercase__res.res.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Vectores__uppercase__res.res.Array__Int__Standard__character.map__content) (( #"vectores.adb" 10 0 0# assert { #"vectores.adb" 10 0 0# (#"vectores.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectores.adb:10:17" "GP_Reason:VC_INDEX_CHECK" "GP_Id:2" "comment:            res(I) := Character'Val(ascii - 32);
                ^ vectores.adb:10:17:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__res_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__uppercase__res.res__first) <= Vectores__uppercase__L_1__i.i.int__content) /\ (Vectores__uppercase__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Vectores__uppercase__res.res__last)) ) )) };
          Vectores__uppercase__L_1__i.i.int__content )) ((Standard__character__rep.of_rep((#"vectores.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectores.adb:10:43" "GP_Shape:L_1_while__if__res_assign__val_ref__sub" "GP_Reason:VC_RANGE_CHECK" "GP_Id:1" "comment:            res(I) := Character'Val(ascii - 32);
                                          ^ vectores.adb:10:43:VC_RANGE_CHECK" (Standard__character.range_check_((#"vectores.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectores.adb:10:43" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:0" "comment:            res(I) := Character'Val(ascii - 32);
                                          ^ vectores.adb:10:43:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__res_assign__val_ref__sub" (Standard__integer.range_check_((Vectores__uppercase__ascii.ascii.int__content - 32))) )))) )))))) )) ) )) else (
          ()))) );
         () (* While loop translating the Ada loop from vectores.adb:7 *)
         ;
          while True do
          invariant { 
           (#"vectores.adb" 12 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectores.adb:12:32" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:4" "comment:         pragma Loop_Invariant(for all J in Str'First..I =>
                               ^ vectores.adb:12:32:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall j #"vectores.adb" 12 0 0#  "model" "model_trace:2394" "name:J"  : int.
            ( ( ((Standard__string.first Vectores__uppercase__str.str) <= j) /\ (j <= Vectores__uppercase__L_1__i.i.int__content) ) -> ( "GP_Pretty_Ada:2414" "GP_Sloc:vectores.adb:13:31" ((Boolean.notb (Boolean.andb (97 <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get Vectores__uppercase__res.res.Array__Int__Standard__character.map__content j))) ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Vectores__uppercase__res.res.Array__Int__Standard__character.map__content j)) <= 122))) = True) ) )) ))
           }
          ( () (* Assume implicit invariants from the loop vectores.adb:7 *)
          ;
           assume {  (Boolean.andb(( ( ( ( ( ( true /\ (if (True) then (
           true) else (
           (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Vectores__uppercase__res.res__first) (Standard__integer__rep.to_rep Vectores__uppercase__res.res__last)))) ) /\ (forall temp___232   : int.
           (if (( ((Standard__integer__rep.to_rep Vectores__uppercase__res.res__first) <= temp___232) /\ (temp___232 <= (Standard__integer__rep.to_rep Vectores__uppercase__res.res__last)) )) then (
            (if (( (temp___229 < temp___232) \/ ( (temp___232 < temp___228) \/ (Vectores__uppercase__L_1__i.i.int__content < temp___232) ) )) then (
             ((Array__Int__Standard__character.get Vectores__uppercase__res.res.Array__Int__Standard__character.map__content temp___232) = (Array__Int__Standard__character.get temp___231 temp___232))) else (
             true))) else true)) ) /\ (if (((Standard__string.first Vectores__uppercase__str.str) <= (Standard__string.last Vectores__uppercase__str.str))) then (
           (Vectores__uppercase__L_1__T2b.dynamic_property (Standard__string.first Vectores__uppercase__str.str) (Standard__string.last Vectores__uppercase__str.str) Vectores__uppercase__L_1__i.i.int__content)) else true) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Vectores__uppercase__ascii.ascii.int__content False True True True) ) /\ true )) (( ((Standard__string.first Vectores__uppercase__str.str) <= Vectores__uppercase__L_1__i.i.int__content) /\ (Vectores__uppercase__L_1__i.i.int__content <= (Standard__string.last Vectores__uppercase__str.str)) ))) };
          () (* Check for absence of RTE in the invariant of loop vectores.adb:7 *)
          ;
           abstract ensures {true}(let _ = ( (let j =  (any int
          ) in (
           (if ((Boolean.andb(((  abstract ensures {true}(let _ = Vectores__uppercase__str.str in (
            ()))
            end ;
           (Standard__string.first(Vectores__uppercase__str.str)) ) <= j)) ((j <= Vectores__uppercase__L_1__i.i.int__content)))) then (
             abstract ensures {true}(let _ = not ( (Boolean.andb((97 <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get(Vectores__uppercase__res.res.Array__Int__Standard__character.map__content) ((  assert {  (#"vectores.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:13:50" "GP_Id:3" "comment:                              Character'Pos((res(J))) not in 97..122);
                                                 ^ vectores.adb:13:50:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__in__typeconv__pos_ref__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__uppercase__res.res__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Vectores__uppercase__res.res__last)) ) )) };
            j ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get(Vectores__uppercase__res.res.Array__Int__Standard__character.map__content) ((  assert {  (#"vectores.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:13:50" "GP_Id:3" "comment:                              Character'Pos((res(J))) not in 97..122);
                                                 ^ vectores.adb:13:50:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__in__typeconv__pos_ref__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__uppercase__res.res__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Vectores__uppercase__res.res__last)) ) )) };
            j ))))) <= 122))) ) in (
             ()))
             end ))))
          ;
           (any bool
          requires { true} 
          ensures { ( (result = True) <-> (forall j   "model" "model_trace:2394" "name:J"  : int.
           ( ( ((Standard__string.first Vectores__uppercase__str.str) <= j) /\ (j <= Vectores__uppercase__L_1__i.i.int__content) ) -> ((Boolean.notb (Boolean.andb (97 <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get Vectores__uppercase__res.res.Array__Int__Standard__character.map__content j))) ((Standard__character__rep.to_rep (Array__Int__Standard__character.get Vectores__uppercase__res.res.Array__Int__Standard__character.map__content j)) <= 122))) = True) )) )} 
          ) ) in (
           ()))
           end ;
          () (* Loop statements appearing after the loop invariant of loop vectores.adb:7 *)
          ;
          () (* Check for the exit condition and loop statements appearing before the loop invariant of loop vectores.adb:7 *)
          ;
          (if ((Vectores__uppercase__L_1__i.i.int__content = temp___229)) then (
            raise Vectores__uppercase__L_1.L_1));
           Vectores__uppercase__L_1__i.i.int__content <- ( (Vectores__uppercase__L_1__i.i.int__content + 1) );
          ( "GP_Sloc:vectores.adb:8:10" (#"vectores.adb" 8 0 0# ()) );
          ( "GP_Sloc:vectores.adb:8:16" (#"vectores.adb" 8 0 0# #"vectores.adb" 8 0 0# Vectores__uppercase__ascii.ascii.int__content <- ( (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(Vectores__uppercase__str.str))) (Vectores__uppercase__L_1__i.i.int__content)))) )) );
          ( "GP_Sloc:vectores.adb:9:13" (#"vectores.adb" 9 0 0# ()) );
          ( "GP_Sloc:vectores.adb:9:29" (#"vectores.adb" 9 0 0# ()) );
          ( "GP_Sloc:vectores.adb:9:10" (#"vectores.adb" 9 0 0# (if ((Boolean.andb((Vectores__uppercase__ascii.ascii.int__content >= 97)) ((Vectores__uppercase__ascii.ascii.int__content <= 122)))) then (
           ( ( "GP_Sloc:vectores.adb:10:13" (#"vectores.adb" 10 0 0# ()) );
           ( "GP_Sloc:vectores.adb:10:37" (#"vectores.adb" 10 0 0# ()) );
           ( "GP_Sloc:vectores.adb:10:20" (#"vectores.adb" 10 0 0# #"vectores.adb" 10 0 0# Vectores__uppercase__res.res.Array__Int__Standard__character.map__content <- ( (Array__Int__Standard__character.set(Vectores__uppercase__res.res.Array__Int__Standard__character.map__content) (( #"vectores.adb" 10 0 0# assert { #"vectores.adb" 10 0 0# (#"vectores.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectores.adb:10:17" "GP_Reason:VC_INDEX_CHECK" "GP_Id:2" "comment:            res(I) := Character'Val(ascii - 32);
                ^ vectores.adb:10:17:VC_INDEX_CHECK" "GP_Shape:L_1_while__if__res_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__uppercase__res.res__first) <= Vectores__uppercase__L_1__i.i.int__content) /\ (Vectores__uppercase__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Vectores__uppercase__res.res__last)) ) )) };
           Vectores__uppercase__L_1__i.i.int__content )) ((Standard__character__rep.of_rep((#"vectores.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectores.adb:10:43" "GP_Shape:L_1_while__if__res_assign__val_ref__sub" "GP_Reason:VC_RANGE_CHECK" "GP_Id:1" "comment:            res(I) := Character'Val(ascii - 32);
                                          ^ vectores.adb:10:43:VC_RANGE_CHECK" (Standard__character.range_check_((#"vectores.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:vectores.adb:10:43" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:0" "comment:            res(I) := Character'Val(ascii - 32);
                                          ^ vectores.adb:10:43:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__if__res_assign__val_ref__sub" (Standard__integer.range_check_((Vectores__uppercase__ascii.ascii.int__content - 32))) )))) )))))) )) ) )) else (
           ()))) ) )
         done )))
         )))
        )))
       )
     with
      Vectores__uppercase__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:vectores.adb:16:14" (#"vectores.adb" 16 0 0# ()) );
   ( "GP_Sloc:vectores.adb:16:7" (#"vectores.adb" 16 0 0# ( #"vectores.adb" 16 0 0# vectores__uppercase__result.Standard__string.string__content <- ( (Standard__string.of_array(Vectores__uppercase__res.res.Array__Int__Standard__character.map__content) ((Standard__integer__rep.to_rep(Vectores__uppercase__res.res__first))) ((Standard__integer__rep.to_rep(Vectores__uppercase__res.res__last)))) );
   #"vectores.adb" 16 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Vectores__uppercase__str.str in (
    ()))
    end ;
   (Standard__string.first(Vectores__uppercase__str.str)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Vectores__uppercase__str.str in (
    ()))
    end ;
   (Standard__string.last(Vectores__uppercase__str.str)) ))))) then (
     abstract ensures {true}(let _ = not ( (Boolean.andb((97 <= (Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(vectores__uppercase__result.Standard__string.string__content))) ((  assert {  (#"vectores.ads" 15 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:15:47" "GP_Id:5" "comment:              Character'Pos((uppercase'Result(I))) not in 97..122 );
                                              ^ vectores.ads:15:47:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__in__typeconv__pos_ref__ixdcomp" ( ((Standard__string.first vectores__uppercase__result.Standard__string.string__content) <= i) /\ (i <= (Standard__string.last vectores__uppercase__result.Standard__string.string__content)) ) )) };
    i ))))))) (((Standard__character__rep.to_rep((Array__Int__Standard__character.get((Standard__string.to_array(vectores__uppercase__result.Standard__string.string__content))) ((  assert {  (#"vectores.ads" 15 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:15:47" "GP_Id:5" "comment:              Character'Pos((uppercase'Result(I))) not in 97..122 );
                                              ^ vectores.ads:15:47:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__in__typeconv__pos_ref__ixdcomp" ( ((Standard__string.first vectores__uppercase__result.Standard__string.string__content) <= i) /\ (i <= (Standard__string.last vectores__uppercase__result.Standard__string.string__content)) ) )) };
    i ))))) <= 122))) ) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2724"  : int.
   ( ( ((Standard__string.first Vectores__uppercase__str.str) <= i) /\ (i <= (Standard__string.last Vectores__uppercase__str.str)) ) -> ((Boolean.notb (Boolean.andb (97 <= (Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array vectores__uppercase__result.Standard__string.string__content) i))) ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (Standard__string.to_array vectores__uppercase__result.Standard__string.string__content) i)) <= 122))) = True) )) )} 
  ) ) in (
   ()))
   end ;
  vectores__uppercase__result.Standard__string.string__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "suma" defined at vectores.ads:20, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Vectores__suma__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__positive
 use        Standard__integer__rep
 use        Vectores__vector
 use        Array__Int__Standard__integer
 use        Vectores__vector___axiom
 use        Vectores__suma__vec1
 use        Vectores__suma__vec2
 use        Array__Int__Standard__integer
 use        Vectores__suma__res
 use        Vectores__suma__L_2
 use        Vectores__suma__L_2__T10b
 use        Vectores__suma__L_2__i
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Vectores__suma__res___axiom
 use        Vectores__suma__L_2__i___axiom
 use        Vectores__suma__L_2___axiom
 use        Vectores__vector___axiom
 use        Vectores__suma__vec1___axiom
 use        Vectores__suma__vec2___axiom
 use        Vectores__suma__L_2__T10b___axiom

 val vectores__suma__result "model_projected" "model_trace:2746@result" "name:suma"  : Vectores__vector.vector__ref 
 
 let def #"vectores.ads" 20 0 0#"W:diverges:N" "GP_Subp:vectores.ads:20" 
   (__void_param : unit)
  requires { #"vectores.ads" 20 0 0# true }
  ensures { #"vectores.ads" 20 0 0# (#"vectores.ads" 35 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__forall" "GP_Sloc:vectores.ads:35:16" "GP_Id:29" "comment:       Post => (for all I in vec1'Range => 
               ^ vectores.ads:35:16:VC_POSTCONDITION" (forall i #"vectores.ads" 35 0 0#  "model" "name:I" "model_trace:2861"  : int.
   ( ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) -> ( "GP_Pretty_Ada:2877" "GP_Sloc:vectores.ads:36:19" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vectores__suma__result.Vectores__vector.vector__content) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i)))) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram vectores.ads:20 *)
  ;
   assume {  (Vectores__vector___axiom.dynamic_invariant Vectores__suma__vec1.vec1 True False True True) };
   assume {  (Vectores__vector___axiom.dynamic_invariant Vectores__suma__vec2.vec2 True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram vectores.ads:20 *)
  ;
  () (* Check for RTE in the Pre of the subprogram vectores.ads:20 *)
  ;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = Vectores__suma__vec1.vec1 in (
   ()))
   end ;
  (Vectores__vector.first(Vectores__suma__vec1.vec1)) ) = (  abstract ensures {true}(let _ = Vectores__suma__vec2.vec2 in (
   ()))
   end ;
  (Vectores__vector.first(Vectores__suma__vec2.vec2)) )) && ( ((  abstract ensures {true}(let _ = Vectores__suma__vec1.vec1 in (
   ()))
   end ;
  (Vectores__vector.last(Vectores__suma__vec1.vec1)) ) = (  abstract ensures {true}(let _ = Vectores__suma__vec2.vec2 in (
   ()))
   end ;
  (Vectores__vector.last(Vectores__suma__vec2.vec2)) )) && ( ((  abstract ensures {true}(let _ = Vectores__suma__vec1.vec1 in (
   ()))
   end ;
  (Vectores__vector.length(Vectores__suma__vec1.vec1)) ) > 0) && ( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Vectores__suma__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.first(Vectores__suma__vec1.vec1)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Vectores__suma__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.last(Vectores__suma__vec1.vec1)) ))))) then (
     abstract ensures {true}(let _ = (if ((Boolean.andb(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec1.vec1))) ((  assert {  (#"vectores.ads" 28 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:28:34" "GP_Id:27" "comment:                        (if vec1(I) > 0 and vec2(I) > 0 then
                                 ^ vectores.ads:28:34:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__and__cmp__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) )) };
    i ))))) > 0)) (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec2.vec2))) ((  assert {  (#"vectores.ads" 28 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__and__cmp__ixdcomp" "GP_Sloc:vectores.ads:28:50" "GP_Id:28" "comment:                        (if vec1(I) > 0 and vec2(I) > 0 then
                                                 ^ vectores.ads:28:50:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__suma__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec2.vec2)) ) )) };
    i ))))) > 0)))) then (
     ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec1.vec1))) ((  assert {  (#"vectores.ads" 29 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:29:62" "GP_Id:19" "comment:							vec1(I)  <= Integer'Last - vec2(I)
                                                             ^ vectores.ads:29:62:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__cmp__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) )) };
     i ))))) <= (#"vectores.ads" 29 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.ads:29:82" "GP_Id:21" "comment:							vec1(I)  <= Integer'Last - vec2(I)
                                                                                 ^ vectores.ads:29:82:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__if__cmp__sub" (Standard__integer.range_check_((2147483647 - (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec2.vec2))) (( #"vectores.ads" 29 0 0# assert { #"vectores.ads" 29 0 0# (#"vectores.ads" 29 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:29:89" "GP_Id:20" "comment:							vec1(I)  <= Integer'Last - vec2(I)
                                                                                        ^ vectores.ads:29:89:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__cmp__sub__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec2.vec2)) ) )) };
     i )))))))) )))) else ((if ((Boolean.andb(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec1.vec1))) ((  assert {  (#"vectores.ads" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:30:36" "GP_Id:25" "comment:                        elsif vec1(I) < 0 and vec2(I) < 0 then            
                                   ^ vectores.ads:30:36:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__and__cmp__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) )) };
    i ))))) < 0)) (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec2.vec2))) ((  assert {  (#"vectores.ads" 30 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__and__cmp__ixdcomp" "GP_Sloc:vectores.ads:30:52" "GP_Id:26" "comment:                        elsif vec1(I) < 0 and vec2(I) < 0 then            
                                                   ^ vectores.ads:30:52:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__suma__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec2.vec2)) ) )) };
    i ))))) < 0)))) then (
     ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec1.vec1))) ((  assert {  (#"vectores.ads" 31 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:31:62" "GP_Id:22" "comment:							vec1(I) >= Integer'First - vec2(I)
                                                             ^ vectores.ads:31:62:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__cmp__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) )) };
     i ))))) >= (#"vectores.ads" 31 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.ads:31:82" "GP_Id:24" "comment:							vec1(I) >= Integer'First - vec2(I)
                                                                                 ^ vectores.ads:31:82:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__if__if__cmp__sub" (Standard__integer.range_check_((( -2147483648 ) - (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec2.vec2))) (( #"vectores.ads" 31 0 0# assert { #"vectores.ads" 31 0 0# (#"vectores.ads" 31 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:31:89" "GP_Id:23" "comment:							vec1(I) >= Integer'First - vec2(I)
                                                                                        ^ vectores.ads:31:89:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__cmp__sub__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec2.vec2)) ) )) };
     i )))))))) )))) else (
     (Boolean.of_int(1)))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2801"  : int.
   ( ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) -> (if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) > 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i)) > 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) <= (2147483647 - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i))))) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) < 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i)) < 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) >= (( -2147483648 ) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i))))) else (
    true)))) )) )} 
  ) ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram vectores.ads:20 *)
  ;
   assume {  ( ((Vectores__vector.first Vectores__suma__vec1.vec1) = (Vectores__vector.first Vectores__suma__vec2.vec2)) /\ ( ((Vectores__vector.last Vectores__suma__vec1.vec1) = (Vectores__vector.last Vectores__suma__vec2.vec2)) /\ ( ((Vectores__vector.length Vectores__suma__vec1.vec1) > 0) /\ (forall i   "model" "name:I" "model_trace:2801"  : int.
   ( ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) -> (if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) > 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i)) > 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) <= (2147483647 - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i))))) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) < 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i)) < 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) >= (( -2147483648 ) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i))))) else (
    true)))) )) ) ) ) };
   try
   ( (#"vectores.adb" 19 0 0# ());
   (#"vectores.adb" 19 0 0# ());
   (#"vectores.adb" 20 0 0# ( (let vectores__suma__res__assume = Vectores__suma__vec1.vec1 in (
    ( #"vectores.adb" 20 0 0# Vectores__suma__res.res.Array__Int__Standard__integer.map__content <- ( (Vectores__vector.to_array(vectores__suma__res__assume)) );
    #"vectores.adb" 20 0 0# assume { #"vectores.adb" 20 0 0# ((Standard__integer__rep.to_rep(Vectores__suma__res.res__first)) = (Vectores__vector.first(vectores__suma__res__assume))) };
    #"vectores.adb" 20 0 0# assume { #"vectores.adb" 20 0 0# ((Standard__integer__rep.to_rep(Vectores__suma__res.res__last)) = (Vectores__vector.last(vectores__suma__res__assume))) } )))
   ;
   #"vectores.adb" 20 0 0# assume { #"vectores.adb" 20 0 0# (if (False) then (
    true) else (
    (Vectores__vector.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Vectores__suma__res.res__first) (Standard__integer__rep.to_rep Vectores__suma__res.res__last)))) } ));
   (#"vectores.adb" 22 0 0# ());
   ( "GP_Sloc:vectores.adb:22:27" (#"vectores.adb" 22 0 0# (let temp___238 = ( #"vectores.adb" 22 0 0# abstract ensures {true}(let _ = Vectores__suma__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.first(Vectores__suma__vec1.vec1)) ) in (
   (let temp___239 = ( #"vectores.adb" 22 0 0# abstract ensures {true}(let _ = Vectores__suma__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.last(Vectores__suma__vec1.vec1)) ) in (
    ( #"vectores.adb" 22 0 0# Vectores__suma__L_2__i.i.int__content <- ( temp___238 );
    () (* Translation of an Ada loop from vectores.adb:22 *)
    ;
    (if ((Boolean.andb((temp___238 <= Vectores__suma__L_2__i.i.int__content)) ((Vectores__suma__L_2__i.i.int__content <= temp___239)))) then (
     #"vectores.adb" 22 0 0# try
      ( #"vectores.adb" 22 0 0# abstract ensures {true}(let _ = Vectores__suma__L_2__i.i.int__content in (
       ()))
       end ;
      (let temp___243 = #"vectores.adb" 22 0 0# (any int
      ensures {#"vectores.adb" 22 0 0# (result = Vectores__suma__L_2__i.i.int__content)} 
      ) in (
       ( #"vectores.adb" 22 0 0# abstract ensures {true}(let _ = Vectores__suma__res.res.Array__Int__Standard__integer.map__content in (
        ()))
        end ;
       (let temp___241 = #"vectores.adb" 22 0 0# (any Array__Int__Standard__integer.map
       ensures {#"vectores.adb" 22 0 0# (result = Vectores__suma__res.res.Array__Int__Standard__integer.map__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop vectores.adb:22 *)
        ;
        ( "GP_Sloc:vectores.adb:23:10" (#"vectores.adb" 23 0 0# ()) );
        ( "GP_Sloc:vectores.adb:23:17" (#"vectores.adb" 23 0 0# #"vectores.adb" 23 0 0# Vectores__suma__res.res.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Vectores__suma__res.res.Array__Int__Standard__integer.map__content) (( #"vectores.adb" 23 0 0# assert { #"vectores.adb" 23 0 0# (#"vectores.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:23:14" "GP_Id:9" "comment:         res(I) := vec1(I) + vec2(I);
             ^ vectores.adb:23:14:VC_INDEX_CHECK" "GP_Shape:L_2_while__res_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__suma__res.res__first) <= Vectores__suma__L_2__i.i.int__content) /\ (Vectores__suma__L_2__i.i.int__content <= (Standard__integer__rep.to_rep Vectores__suma__res.res__last)) ) )) };
        Vectores__suma__L_2__i.i.int__content )) ((Standard__integer__rep.of_rep((#"vectores.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.adb:23:28" "GP_Id:8" "comment:         res(I) := vec1(I) + vec2(I);
                           ^ vectores.adb:23:28:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__res_assign__add" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec1.vec1))) (Vectores__suma__L_2__i.i.int__content)))) + (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec2.vec2))) (( #"vectores.adb" 23 0 0# assert { #"vectores.adb" 23 0 0# (#"vectores.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:23:35" "GP_Id:7" "comment:         res(I) := vec1(I) + vec2(I);
                                  ^ vectores.adb:23:35:VC_INDEX_CHECK" "GP_Shape:L_2_while__res_assign__add__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec2.vec2) <= Vectores__suma__L_2__i.i.int__content) /\ (Vectores__suma__L_2__i.i.int__content <= (Vectores__vector.last Vectores__suma__vec2.vec2)) ) )) };
        Vectores__suma__L_2__i.i.int__content )))))))) )))))) )) );
        () (* While loop translating the Ada loop from vectores.adb:22 *)
        ;
         while True do
         invariant { 
          (#"vectores.adb" 24 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:vectores.adb:24:33" "GP_Id:14" "comment:         pragma Loop_Invariant (for all K in res'First .. I =>
                                ^ vectores.adb:24:33:VC_LOOP_INVARIANT" "GP_Shape:L_2_while__pragargs__forall" (forall k #"vectores.adb" 24 0 0#  "model" "model_trace:2494" "name:K"  : int.
           ( ( ((Standard__integer__rep.to_rep Vectores__suma__res.res__first) <= k) /\ (k <= Vectores__suma__L_2__i.i.int__content) ) -> ( "GP_Pretty_Ada:2511" "GP_Sloc:vectores.adb:25:33" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Vectores__suma__res.res.Array__Int__Standard__integer.map__content k)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) k)) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) k)))) ) )) ))
          }
         ( () (* Assume implicit invariants from the loop vectores.adb:22 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (if (True) then (
          true) else (
          (Vectores__vector.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Vectores__suma__res.res__first) (Standard__integer__rep.to_rep Vectores__suma__res.res__last)))) ) /\ (forall temp___242   : int.
          (if (( ((Standard__integer__rep.to_rep Vectores__suma__res.res__first) <= temp___242) /\ (temp___242 <= (Standard__integer__rep.to_rep Vectores__suma__res.res__last)) )) then (
           (if (( (temp___239 < temp___242) \/ ( (temp___242 < temp___238) \/ (Vectores__suma__L_2__i.i.int__content < temp___242) ) )) then (
            ((Array__Int__Standard__integer.get Vectores__suma__res.res.Array__Int__Standard__integer.map__content temp___242) = (Array__Int__Standard__integer.get temp___241 temp___242))) else (
            true))) else true)) ) /\ (if (((Vectores__vector.first Vectores__suma__vec1.vec1) <= (Vectores__vector.last Vectores__suma__vec1.vec1))) then (
          (Vectores__suma__L_2__T10b.dynamic_property (Vectores__vector.first Vectores__suma__vec1.vec1) (Vectores__vector.last Vectores__suma__vec1.vec1) Vectores__suma__L_2__i.i.int__content)) else true) ) /\ true )) (( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= Vectores__suma__L_2__i.i.int__content) /\ (Vectores__suma__L_2__i.i.int__content <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ))) };
         () (* Check for absence of RTE in the invariant of loop vectores.adb:22 *)
         ;
          abstract ensures {true}(let _ = ( (let k =  (any int
         ) in (
          (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Vectores__suma__res.res.Array__Int__Standard__integer.map__content in (
           ()))
           end ;
          Vectores__suma__res.res__first ))) <= k)) ((k <= Vectores__suma__L_2__i.i.int__content)))) then (
            abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Vectores__suma__res.res.Array__Int__Standard__integer.map__content) ((  assert {  (#"vectores.adb" 25 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:25:38" "GP_Id:10" "comment:                                (res(K) = vec1(K) + vec2(K)));
                                     ^ vectores.adb:25:38:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__suma__res.res__first) <= k) /\ (k <= (Standard__integer__rep.to_rep Vectores__suma__res.res__last)) ) )) };
           k ))))) = (#"vectores.adb" 25 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.adb:25:51" "GP_Id:13" "comment:                                (res(K) = vec1(K) + vec2(K)));
                                                  ^ vectores.adb:25:51:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__add" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec1.vec1))) (( #"vectores.adb" 25 0 0# assert { #"vectores.adb" 25 0 0# (#"vectores.adb" 25 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:25:48" "GP_Id:11" "comment:                                (res(K) = vec1(K) + vec2(K)));
                                               ^ vectores.adb:25:48:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__add__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= k) /\ (k <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) )) };
           k ))))) + (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec2.vec2))) ((  assert {  (#"vectores.adb" 25 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_2_while__pragargs__forall__cmp__add__ixdcomp" "GP_Sloc:vectores.adb:25:58" "GP_Id:12" "comment:                                (res(K) = vec1(K) + vec2(K)));
                                                         ^ vectores.adb:25:58:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__suma__vec2.vec2) <= k) /\ (k <= (Vectores__vector.last Vectores__suma__vec2.vec2)) ) )) };
           k )))))))) ))) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall k   "model" "model_trace:2494" "name:K"  : int.
          ( ( ((Standard__integer__rep.to_rep Vectores__suma__res.res__first) <= k) /\ (k <= Vectores__suma__L_2__i.i.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Vectores__suma__res.res.Array__Int__Standard__integer.map__content k)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) k)) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) k)))) )) )} 
         ) ) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop vectores.adb:22 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop vectores.adb:22 *)
         ;
         (if ((Vectores__suma__L_2__i.i.int__content = temp___239)) then (
           raise Vectores__suma__L_2.L_2));
          Vectores__suma__L_2__i.i.int__content <- ( (Vectores__suma__L_2__i.i.int__content + 1) );
         ( "GP_Sloc:vectores.adb:23:10" (#"vectores.adb" 23 0 0# ()) );
         ( "GP_Sloc:vectores.adb:23:17" (#"vectores.adb" 23 0 0# #"vectores.adb" 23 0 0# Vectores__suma__res.res.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Vectores__suma__res.res.Array__Int__Standard__integer.map__content) (( #"vectores.adb" 23 0 0# assert { #"vectores.adb" 23 0 0# (#"vectores.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:23:14" "GP_Id:9" "comment:         res(I) := vec1(I) + vec2(I);
             ^ vectores.adb:23:14:VC_INDEX_CHECK" "GP_Shape:L_2_while__res_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__suma__res.res__first) <= Vectores__suma__L_2__i.i.int__content) /\ (Vectores__suma__L_2__i.i.int__content <= (Standard__integer__rep.to_rep Vectores__suma__res.res__last)) ) )) };
         Vectores__suma__L_2__i.i.int__content )) ((Standard__integer__rep.of_rep((#"vectores.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.adb:23:28" "GP_Id:8" "comment:         res(I) := vec1(I) + vec2(I);
                           ^ vectores.adb:23:28:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__res_assign__add" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec1.vec1))) (Vectores__suma__L_2__i.i.int__content)))) + (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec2.vec2))) (( #"vectores.adb" 23 0 0# assert { #"vectores.adb" 23 0 0# (#"vectores.adb" 23 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:23:35" "GP_Id:7" "comment:         res(I) := vec1(I) + vec2(I);
                                  ^ vectores.adb:23:35:VC_INDEX_CHECK" "GP_Shape:L_2_while__res_assign__add__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec2.vec2) <= Vectores__suma__L_2__i.i.int__content) /\ (Vectores__suma__L_2__i.i.int__content <= (Vectores__vector.last Vectores__suma__vec2.vec2)) ) )) };
         Vectores__suma__L_2__i.i.int__content )))))))) )))))) )) ) )
        done )))
        )))
       )
     with
      Vectores__suma__L_2.L_2 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:vectores.adb:28:14" (#"vectores.adb" 28 0 0# ()) );
   ( "GP_Sloc:vectores.adb:28:7" (#"vectores.adb" 28 0 0# ( #"vectores.adb" 28 0 0# vectores__suma__result.Vectores__vector.vector__content <- ( (Vectores__vector.of_array(Vectores__suma__res.res.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(Vectores__suma__res.res__first))) ((Standard__integer__rep.to_rep(Vectores__suma__res.res__last)))) );
   #"vectores.adb" 28 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Vectores__suma__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.first(Vectores__suma__vec1.vec1)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Vectores__suma__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.last(Vectores__suma__vec1.vec1)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(vectores__suma__result.Vectores__vector.vector__content))) ((  assert {  (#"vectores.ads" 36 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:36:32" "GP_Id:15" "comment:                  suma'Result (I) = vec1(I)+vec2(I));
                               ^ vectores.ads:36:32:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" ( ((Vectores__vector.first vectores__suma__result.Vectores__vector.vector__content) <= i) /\ (i <= (Vectores__vector.last vectores__suma__result.Vectores__vector.vector__content)) ) )) };
    i ))))) = (#"vectores.ads" 36 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.ads:36:44" "GP_Id:18" "comment:                  suma'Result (I) = vec1(I)+vec2(I));
                                           ^ vectores.ads:36:44:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__cmp__add" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec1.vec1))) (( #"vectores.ads" 36 0 0# assert { #"vectores.ads" 36 0 0# (#"vectores.ads" 36 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:36:42" "GP_Id:16" "comment:                  suma'Result (I) = vec1(I)+vec2(I));
                                         ^ vectores.ads:36:42:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__add__ixdcomp" ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) )) };
    i ))))) + (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__suma__vec2.vec2))) ((  assert {  (#"vectores.ads" 36 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__add__ixdcomp" "GP_Sloc:vectores.ads:36:50" "GP_Id:17" "comment:                  suma'Result (I) = vec1(I)+vec2(I));
                                                 ^ vectores.ads:36:50:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__suma__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec2.vec2)) ) )) };
    i )))))))) ))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2861"  : int.
   ( ( ((Vectores__vector.first Vectores__suma__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__suma__vec1.vec1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vectores__suma__result.Vectores__vector.vector__content) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec1.vec1) i)) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__suma__vec2.vec2) i)))) )) )} 
  ) ) in (
   ()))
   end ;
  vectores__suma__result.Vectores__vector.vector__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "resta" defined at vectores.ads:40, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Vectores__resta__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Standard__positive
 use        Standard__integer__rep
 use        Vectores__vector
 use        Array__Int__Standard__integer
 use        Vectores__vector___axiom
 use        Vectores__resta__vec1
 use        Vectores__resta__vec2
 use        Array__Int__Standard__integer
 use        Vectores__resta__res
 use        Vectores__resta__L_3
 use        Vectores__resta__L_3__T18b
 use        Vectores__resta__L_3__i
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Vectores__resta__res___axiom
 use        Vectores__resta__L_3__i___axiom
 use        Vectores__resta__L_3___axiom
 use        Vectores__vector___axiom
 use        Vectores__resta__vec1___axiom
 use        Vectores__resta__vec2___axiom
 use        Vectores__resta__L_3__T18b___axiom

 val vectores__resta__result "model_projected" "model_trace:2884@result" "name:resta"  : Vectores__vector.vector__ref 
 
 let def #"vectores.ads" 40 0 0#"W:diverges:N" "GP_Subp:vectores.ads:40" 
   (__void_param : unit)
  requires { #"vectores.ads" 40 0 0# true }
  ensures { #"vectores.ads" 40 0 0# (#"vectores.ads" 55 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Shape:pragargs__forall" "GP_Sloc:vectores.ads:55:16" "GP_Id:53" "comment:       Post => (for all I in vec1'Range => 
               ^ vectores.ads:55:16:VC_POSTCONDITION" (forall i #"vectores.ads" 55 0 0#  "model" "name:I" "model_trace:3008"  : int.
   ( ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) -> ( "GP_Pretty_Ada:3024" "GP_Sloc:vectores.ads:56:19" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vectores__resta__result.Vectores__vector.vector__content) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i)))) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram vectores.ads:40 *)
  ;
   assume {  (Vectores__vector___axiom.dynamic_invariant Vectores__resta__vec1.vec1 True False True True) };
   assume {  (Vectores__vector___axiom.dynamic_invariant Vectores__resta__vec2.vec2 True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram vectores.ads:40 *)
  ;
  () (* Check for RTE in the Pre of the subprogram vectores.ads:40 *)
  ;
   abstract ensures {true}(let _ = ( ((  abstract ensures {true}(let _ = Vectores__resta__vec1.vec1 in (
   ()))
   end ;
  (Vectores__vector.first(Vectores__resta__vec1.vec1)) ) = (  abstract ensures {true}(let _ = Vectores__resta__vec2.vec2 in (
   ()))
   end ;
  (Vectores__vector.first(Vectores__resta__vec2.vec2)) )) && ( ((  abstract ensures {true}(let _ = Vectores__resta__vec1.vec1 in (
   ()))
   end ;
  (Vectores__vector.last(Vectores__resta__vec1.vec1)) ) = (  abstract ensures {true}(let _ = Vectores__resta__vec2.vec2 in (
   ()))
   end ;
  (Vectores__vector.last(Vectores__resta__vec2.vec2)) )) && ( ((  abstract ensures {true}(let _ = Vectores__resta__vec1.vec1 in (
   ()))
   end ;
  (Vectores__vector.length(Vectores__resta__vec1.vec1)) ) > 0) && ( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Vectores__resta__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.first(Vectores__resta__vec1.vec1)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Vectores__resta__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.last(Vectores__resta__vec1.vec1)) ))))) then (
     abstract ensures {true}(let _ = (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec2.vec2))) ((  assert {  (#"vectores.ads" 47 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__cmp__ixdcomp" "GP_Sloc:vectores.ads:47:33" "GP_Id:52" "comment:                       (if vec2(I) = Integer'First then False
                                ^ vectores.ads:47:33:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__resta__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )) };
    i ))))) = ( -2147483648 ))) then (
     (Boolean.of_int(0))) else ((if ((Boolean.andb(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec1.vec1))) ((  assert {  (#"vectores.ads" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__and__cmp__ixdcomp" "GP_Sloc:vectores.ads:48:36" "GP_Id:50" "comment:                        elsif vec1(I) > 0 and vec2(I) < 0 then
                                   ^ vectores.ads:48:36:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) )) };
    i ))))) > 0)) (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec2.vec2))) ((  assert {  (#"vectores.ads" 48 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__and__cmp__ixdcomp" "GP_Sloc:vectores.ads:48:52" "GP_Id:51" "comment:                        elsif vec1(I) > 0 and vec2(I) < 0 then
                                                   ^ vectores.ads:48:52:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__resta__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )) };
    i ))))) < 0)))) then (
     ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec1.vec1))) ((  assert {  (#"vectores.ads" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__cmp__ixdcomp" "GP_Sloc:vectores.ads:49:35" "GP_Id:42" "comment:                             vec1(I) <= Integer'Last + vec2(I) 
                                  ^ vectores.ads:49:35:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) )) };
     i ))))) <= (#"vectores.ads" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.ads:49:54" "GP_Id:44" "comment:                             vec1(I) <= Integer'Last + vec2(I) 
                                                     ^ vectores.ads:49:54:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__if__if__cmp__add" (Standard__integer.range_check_((2147483647 + (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec2.vec2))) (( #"vectores.ads" 49 0 0# assert { #"vectores.ads" 49 0 0# (#"vectores.ads" 49 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:49:61" "GP_Id:43" "comment:                             vec1(I) <= Integer'Last + vec2(I) 
                                                            ^ vectores.ads:49:61:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__cmp__add__ixdcomp" ( ((Vectores__vector.first Vectores__resta__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )) };
     i )))))))) )))) else ((if ((Boolean.andb(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec1.vec1))) ((  assert {  (#"vectores.ads" 50 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:50:36" "GP_Id:48" "comment:                        elsif vec1(I) < 0 and vec2(I) > 0 then            
                                   ^ vectores.ads:50:36:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__if__and__cmp__ixdcomp" ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) )) };
    i ))))) < 0)) (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec2.vec2))) ((  assert {  (#"vectores.ads" 50 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__if__and__cmp__ixdcomp" "GP_Sloc:vectores.ads:50:52" "GP_Id:49" "comment:                        elsif vec1(I) < 0 and vec2(I) > 0 then            
                                                   ^ vectores.ads:50:52:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__resta__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )) };
    i ))))) > 0)))) then (
     ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec1.vec1))) ((  assert {  (#"vectores.ads" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:51:35" "GP_Id:45" "comment:                             vec1(I)  >= Integer'First + vec2(I)
                                  ^ vectores.ads:51:35:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__if__cmp__ixdcomp" ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) )) };
     i ))))) >= (#"vectores.ads" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.ads:51:56" "GP_Id:47" "comment:                             vec1(I)  >= Integer'First + vec2(I)
                                                       ^ vectores.ads:51:56:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__if__if__if__cmp__add" (Standard__integer.range_check_((( -2147483648 ) + (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec2.vec2))) (( #"vectores.ads" 51 0 0# assert { #"vectores.ads" 51 0 0# (#"vectores.ads" 51 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:51:63" "GP_Id:46" "comment:                             vec1(I)  >= Integer'First + vec2(I)
                                                              ^ vectores.ads:51:63:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__if__if__if__cmp__add__ixdcomp" ( ((Vectores__vector.first Vectores__resta__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )) };
     i )))))))) )))) else (
     (Boolean.of_int(1)))))))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2939"  : int.
   ( ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) -> (if (((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i)) = ( -2147483648 ))) then (
    false) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) > 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i)) < 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) <= (2147483647 + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i))))) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) < 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i)) > 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) >= (( -2147483648 ) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i))))) else (
    true)))))) )) )} 
  ) ) ) ) ) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram vectores.ads:40 *)
  ;
   assume {  ( ((Vectores__vector.first Vectores__resta__vec1.vec1) = (Vectores__vector.first Vectores__resta__vec2.vec2)) /\ ( ((Vectores__vector.last Vectores__resta__vec1.vec1) = (Vectores__vector.last Vectores__resta__vec2.vec2)) /\ ( ((Vectores__vector.length Vectores__resta__vec1.vec1) > 0) /\ (forall i   "model" "name:I" "model_trace:2939"  : int.
   ( ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) -> (if (((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i)) = ( -2147483648 ))) then (
    false) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) > 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i)) < 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) <= (2147483647 + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i))))) else ((if (( ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) < 0) /\ ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i)) > 0) )) then (
    ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) >= (( -2147483648 ) + (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i))))) else (
    true)))))) )) ) ) ) };
   try
   ( (#"vectores.adb" 31 0 0# ());
   (#"vectores.adb" 31 0 0# ());
   (#"vectores.adb" 32 0 0# ( (let vectores__resta__res__assume = Vectores__resta__vec1.vec1 in (
    ( #"vectores.adb" 32 0 0# Vectores__resta__res.res.Array__Int__Standard__integer.map__content <- ( (Vectores__vector.to_array(vectores__resta__res__assume)) );
    #"vectores.adb" 32 0 0# assume { #"vectores.adb" 32 0 0# ((Standard__integer__rep.to_rep(Vectores__resta__res.res__first)) = (Vectores__vector.first(vectores__resta__res__assume))) };
    #"vectores.adb" 32 0 0# assume { #"vectores.adb" 32 0 0# ((Standard__integer__rep.to_rep(Vectores__resta__res.res__last)) = (Vectores__vector.last(vectores__resta__res__assume))) } )))
   ;
   #"vectores.adb" 32 0 0# assume { #"vectores.adb" 32 0 0# (if (False) then (
    true) else (
    (Vectores__vector.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Vectores__resta__res.res__first) (Standard__integer__rep.to_rep Vectores__resta__res.res__last)))) } ));
   (#"vectores.adb" 34 0 0# ());
   ( "GP_Sloc:vectores.adb:34:27" (#"vectores.adb" 34 0 0# (let temp___248 = ( #"vectores.adb" 34 0 0# abstract ensures {true}(let _ = Vectores__resta__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.first(Vectores__resta__vec1.vec1)) ) in (
   (let temp___249 = ( #"vectores.adb" 34 0 0# abstract ensures {true}(let _ = Vectores__resta__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.last(Vectores__resta__vec1.vec1)) ) in (
    ( #"vectores.adb" 34 0 0# Vectores__resta__L_3__i.i.int__content <- ( temp___248 );
    () (* Translation of an Ada loop from vectores.adb:34 *)
    ;
    (if ((Boolean.andb((temp___248 <= Vectores__resta__L_3__i.i.int__content)) ((Vectores__resta__L_3__i.i.int__content <= temp___249)))) then (
     #"vectores.adb" 34 0 0# try
      ( #"vectores.adb" 34 0 0# abstract ensures {true}(let _ = Vectores__resta__L_3__i.i.int__content in (
       ()))
       end ;
      (let temp___253 = #"vectores.adb" 34 0 0# (any int
      ensures {#"vectores.adb" 34 0 0# (result = Vectores__resta__L_3__i.i.int__content)} 
      ) in (
       ( #"vectores.adb" 34 0 0# abstract ensures {true}(let _ = Vectores__resta__res.res.Array__Int__Standard__integer.map__content in (
        ()))
        end ;
       (let temp___251 = #"vectores.adb" 34 0 0# (any Array__Int__Standard__integer.map
       ensures {#"vectores.adb" 34 0 0# (result = Vectores__resta__res.res.Array__Int__Standard__integer.map__content)} 
       ) in (
        ( () (* First unroling of the loop statements appearing before the loop invariant of loop vectores.adb:34 *)
        ;
        ( "GP_Sloc:vectores.adb:35:10" (#"vectores.adb" 35 0 0# ()) );
        ( "GP_Sloc:vectores.adb:35:17" (#"vectores.adb" 35 0 0# #"vectores.adb" 35 0 0# Vectores__resta__res.res.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Vectores__resta__res.res.Array__Int__Standard__integer.map__content) (( #"vectores.adb" 35 0 0# assert { #"vectores.adb" 35 0 0# (#"vectores.adb" 35 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:35:14" "GP_Id:32" "comment:         res(I) := vec1(I) - vec2(I);
             ^ vectores.adb:35:14:VC_INDEX_CHECK" "GP_Shape:L_3_while__res_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__resta__res.res__first) <= Vectores__resta__L_3__i.i.int__content) /\ (Vectores__resta__L_3__i.i.int__content <= (Standard__integer__rep.to_rep Vectores__resta__res.res__last)) ) )) };
        Vectores__resta__L_3__i.i.int__content )) ((Standard__integer__rep.of_rep((#"vectores.adb" 35 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.adb:35:28" "GP_Id:31" "comment:         res(I) := vec1(I) - vec2(I);
                           ^ vectores.adb:35:28:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__res_assign__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec1.vec1))) (Vectores__resta__L_3__i.i.int__content)))) - (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec2.vec2))) (( #"vectores.adb" 35 0 0# assert { #"vectores.adb" 35 0 0# (#"vectores.adb" 35 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:35:35" "GP_Id:30" "comment:         res(I) := vec1(I) - vec2(I);
                                  ^ vectores.adb:35:35:VC_INDEX_CHECK" "GP_Shape:L_3_while__res_assign__sub__ixdcomp" ( ((Vectores__vector.first Vectores__resta__vec2.vec2) <= Vectores__resta__L_3__i.i.int__content) /\ (Vectores__resta__L_3__i.i.int__content <= (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )) };
        Vectores__resta__L_3__i.i.int__content )))))))) )))))) )) );
        () (* While loop translating the Ada loop from vectores.adb:34 *)
        ;
         while True do
         invariant { 
          (#"vectores.adb" 36 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:vectores.adb:36:33" "GP_Id:37" "comment:         pragma Loop_Invariant (for all K in res'First .. I =>
                                ^ vectores.adb:36:33:VC_LOOP_INVARIANT" "GP_Shape:L_3_while__pragargs__forall" (forall k #"vectores.adb" 36 0 0#  "model" "name:K" "model_trace:2595"  : int.
           ( ( ((Standard__integer__rep.to_rep Vectores__resta__res.res__first) <= k) /\ (k <= Vectores__resta__L_3__i.i.int__content) ) -> ( "GP_Pretty_Ada:2612" "GP_Sloc:vectores.adb:37:33" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Vectores__resta__res.res.Array__Int__Standard__integer.map__content k)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) k)) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) k)))) ) )) ))
          }
         ( () (* Assume implicit invariants from the loop vectores.adb:34 *)
         ;
          assume {  (Boolean.andb(( ( ( ( true /\ (if (True) then (
          true) else (
          (Vectores__vector.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Vectores__resta__res.res__first) (Standard__integer__rep.to_rep Vectores__resta__res.res__last)))) ) /\ (forall temp___252   : int.
          (if (( ((Standard__integer__rep.to_rep Vectores__resta__res.res__first) <= temp___252) /\ (temp___252 <= (Standard__integer__rep.to_rep Vectores__resta__res.res__last)) )) then (
           (if (( (temp___249 < temp___252) \/ ( (temp___252 < temp___248) \/ (Vectores__resta__L_3__i.i.int__content < temp___252) ) )) then (
            ((Array__Int__Standard__integer.get Vectores__resta__res.res.Array__Int__Standard__integer.map__content temp___252) = (Array__Int__Standard__integer.get temp___251 temp___252))) else (
            true))) else true)) ) /\ (if (((Vectores__vector.first Vectores__resta__vec1.vec1) <= (Vectores__vector.last Vectores__resta__vec1.vec1))) then (
          (Vectores__resta__L_3__T18b.dynamic_property (Vectores__vector.first Vectores__resta__vec1.vec1) (Vectores__vector.last Vectores__resta__vec1.vec1) Vectores__resta__L_3__i.i.int__content)) else true) ) /\ true )) (( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= Vectores__resta__L_3__i.i.int__content) /\ (Vectores__resta__L_3__i.i.int__content <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ))) };
         () (* Check for absence of RTE in the invariant of loop vectores.adb:34 *)
         ;
          abstract ensures {true}(let _ = ( (let k =  (any int
         ) in (
          (if ((Boolean.andb(((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Vectores__resta__res.res.Array__Int__Standard__integer.map__content in (
           ()))
           end ;
          Vectores__resta__res.res__first ))) <= k)) ((k <= Vectores__resta__L_3__i.i.int__content)))) then (
            abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Vectores__resta__res.res.Array__Int__Standard__integer.map__content) ((  assert {  (#"vectores.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:37:38" "GP_Id:33" "comment:                                (res(K) = vec1(K) - vec2(K)));
                                     ^ vectores.adb:37:38:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__resta__res.res__first) <= k) /\ (k <= (Standard__integer__rep.to_rep Vectores__resta__res.res__last)) ) )) };
           k ))))) = (#"vectores.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.adb:37:51" "GP_Id:36" "comment:                                (res(K) = vec1(K) - vec2(K)));
                                                  ^ vectores.adb:37:51:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__pragargs__forall__cmp__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec1.vec1))) (( #"vectores.adb" 37 0 0# assert { #"vectores.adb" 37 0 0# (#"vectores.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:37:48" "GP_Id:34" "comment:                                (res(K) = vec1(K) - vec2(K)));
                                               ^ vectores.adb:37:48:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__cmp__sub__ixdcomp" ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= k) /\ (k <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) )) };
           k ))))) - (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec2.vec2))) ((  assert {  (#"vectores.adb" 37 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_3_while__pragargs__forall__cmp__sub__ixdcomp" "GP_Sloc:vectores.adb:37:58" "GP_Id:35" "comment:                                (res(K) = vec1(K) - vec2(K)));
                                                         ^ vectores.adb:37:58:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__resta__vec2.vec2) <= k) /\ (k <= (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )) };
           k )))))))) ))) in (
            ()))
            end ))))
         ;
          (any bool
         requires { true} 
         ensures { ( (result = True) <-> (forall k   "model" "name:K" "model_trace:2595"  : int.
          ( ( ((Standard__integer__rep.to_rep Vectores__resta__res.res__first) <= k) /\ (k <= Vectores__resta__L_3__i.i.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Vectores__resta__res.res.Array__Int__Standard__integer.map__content k)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) k)) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) k)))) )) )} 
         ) ) in (
          ()))
          end ;
         () (* Loop statements appearing after the loop invariant of loop vectores.adb:34 *)
         ;
         () (* Check for the exit condition and loop statements appearing before the loop invariant of loop vectores.adb:34 *)
         ;
         (if ((Vectores__resta__L_3__i.i.int__content = temp___249)) then (
           raise Vectores__resta__L_3.L_3));
          Vectores__resta__L_3__i.i.int__content <- ( (Vectores__resta__L_3__i.i.int__content + 1) );
         ( "GP_Sloc:vectores.adb:35:10" (#"vectores.adb" 35 0 0# ()) );
         ( "GP_Sloc:vectores.adb:35:17" (#"vectores.adb" 35 0 0# #"vectores.adb" 35 0 0# Vectores__resta__res.res.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Vectores__resta__res.res.Array__Int__Standard__integer.map__content) (( #"vectores.adb" 35 0 0# assert { #"vectores.adb" 35 0 0# (#"vectores.adb" 35 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:35:14" "GP_Id:32" "comment:         res(I) := vec1(I) - vec2(I);
             ^ vectores.adb:35:14:VC_INDEX_CHECK" "GP_Shape:L_3_while__res_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Vectores__resta__res.res__first) <= Vectores__resta__L_3__i.i.int__content) /\ (Vectores__resta__L_3__i.i.int__content <= (Standard__integer__rep.to_rep Vectores__resta__res.res__last)) ) )) };
         Vectores__resta__L_3__i.i.int__content )) ((Standard__integer__rep.of_rep((#"vectores.adb" 35 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.adb:35:28" "GP_Id:31" "comment:         res(I) := vec1(I) - vec2(I);
                           ^ vectores.adb:35:28:VC_OVERFLOW_CHECK" "GP_Shape:L_3_while__res_assign__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec1.vec1))) (Vectores__resta__L_3__i.i.int__content)))) - (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec2.vec2))) (( #"vectores.adb" 35 0 0# assert { #"vectores.adb" 35 0 0# (#"vectores.adb" 35 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.adb:35:35" "GP_Id:30" "comment:         res(I) := vec1(I) - vec2(I);
                                  ^ vectores.adb:35:35:VC_INDEX_CHECK" "GP_Shape:L_3_while__res_assign__sub__ixdcomp" ( ((Vectores__vector.first Vectores__resta__vec2.vec2) <= Vectores__resta__L_3__i.i.int__content) /\ (Vectores__resta__L_3__i.i.int__content <= (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )) };
         Vectores__resta__L_3__i.i.int__content )))))))) )))))) )) ) )
        done )))
        )))
       )
     with
      Vectores__resta__L_3.L_3 -> ()
     end)) )))
   ))
   ) );
   ( "GP_Sloc:vectores.adb:40:14" (#"vectores.adb" 40 0 0# ()) );
   ( "GP_Sloc:vectores.adb:40:7" (#"vectores.adb" 40 0 0# ( #"vectores.adb" 40 0 0# vectores__resta__result.Vectores__vector.vector__content <- ( (Vectores__vector.of_array(Vectores__resta__res.res.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(Vectores__resta__res.res__first))) ((Standard__integer__rep.to_rep(Vectores__resta__res.res__last)))) );
   #"vectores.adb" 40 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let i =  (any int
  ) in (
   (if ((Boolean.andb(((  abstract ensures {true}(let _ = Vectores__resta__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.first(Vectores__resta__vec1.vec1)) ) <= i)) ((i <= (  abstract ensures {true}(let _ = Vectores__resta__vec1.vec1 in (
    ()))
    end ;
   (Vectores__vector.last(Vectores__resta__vec1.vec1)) ))))) then (
     abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(vectores__resta__result.Vectores__vector.vector__content))) ((  assert {  (#"vectores.ads" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__ixdcomp" "GP_Sloc:vectores.ads:56:33" "GP_Id:38" "comment:                  resta'Result (I) = vec1(I)-vec2(I));
                                ^ vectores.ads:56:33:VC_INDEX_CHECK" ( ((Vectores__vector.first vectores__resta__result.Vectores__vector.vector__content) <= i) /\ (i <= (Vectores__vector.last vectores__resta__result.Vectores__vector.vector__content)) ) )) };
    i ))))) = (#"vectores.ads" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:vectores.ads:56:45" "GP_Id:41" "comment:                  resta'Result (I) = vec1(I)-vec2(I));
                                            ^ vectores.ads:56:45:VC_OVERFLOW_CHECK" "GP_Shape:pragargs__forall__cmp__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec1.vec1))) (( #"vectores.ads" 56 0 0# assert { #"vectores.ads" 56 0 0# (#"vectores.ads" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:vectores.ads:56:43" "GP_Id:39" "comment:                  resta'Result (I) = vec1(I)-vec2(I));
                                          ^ vectores.ads:56:43:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__sub__ixdcomp" ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) )) };
    i ))))) - (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Vectores__vector.to_array(Vectores__resta__vec2.vec2))) ((  assert {  (#"vectores.ads" 56 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:pragargs__forall__cmp__sub__ixdcomp" "GP_Sloc:vectores.ads:56:51" "GP_Id:40" "comment:                  resta'Result (I) = vec1(I)-vec2(I));
                                                  ^ vectores.ads:56:51:VC_INDEX_CHECK" ( ((Vectores__vector.first Vectores__resta__vec2.vec2) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec2.vec2)) ) )) };
    i )))))))) ))) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:3008"  : int.
   ( ( ((Vectores__vector.first Vectores__resta__vec1.vec1) <= i) /\ (i <= (Vectores__vector.last Vectores__resta__vec1.vec1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array vectores__resta__result.Vectores__vector.vector__content) i)) = ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec1.vec1) i)) - (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Vectores__vector.to_array Vectores__resta__vec2.vec2) i)))) )) )} 
  ) ) in (
   ()))
   end ;
  vectores__resta__result.Vectores__vector.vector__content )
end
